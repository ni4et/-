#!/usr/bin/env node

/**
 * Module dependencies.
 */
const dbg = require("../lib/dbg");
dbg.www.enabled = true;
dbg.www("WWW debug enabled!");

var app = require("../app");
var debug = require("debug")("hamsuite.0:server");
var http = require("http");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 *
 */

var server = http.createServer(app);
///////
// https://socket.io/docs/v4/server-initialization/#with-express

const { Server } = require("socket.io");

var io = new Server(server, {
  /* options */
});

///////

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

// https://socket.io/docs/v4/server-application-structure/#each-file-registers-its-own-event-handlers
// A js function in the client will initiate the connection message.
// io.on will call registerXXX functions with the socket so that the events of interest can be registered.

io.on("connection", (socket) => {
  dbg.www("On connection");

  socket.on("chat message", (msg) => {
    dbg.www("msg " + msg);
  });
  // {registerXXXXX}=require('xxxx');
  // registerXXXXX(io, socket);  -
  // event handlers that are needed will be resgistered in the xxxx module.
  // This makes the most sense with my application structure.
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
